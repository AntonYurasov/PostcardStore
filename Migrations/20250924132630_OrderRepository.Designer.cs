// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASPCourse_Empty.Migrations
{
    [DbContext(typeof(PostcardDBContext))]
    [Migration("20250924132630_OrderRepository")]
    partial class OrderRepository
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ASPCourceEmpty.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("order_total");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("PlaceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("place_date");

                    b.HasKey("OrderId")
                        .HasName("pk_orders");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("PostcardId")
                        .HasColumnType("integer")
                        .HasColumnName("postcard_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("OrderDetailId")
                        .HasName("pk_order_details");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_details_order_id");

                    b.HasIndex("PostcardId")
                        .HasDatabaseName("ix_order_details_postcard_id");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.Postcard", b =>
                {
                    b.Property<int>("PostcardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("postcard_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostcardId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_thumbnail_url");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("InStock")
                        .HasColumnType("boolean")
                        .HasColumnName("in_stock");

                    b.Property<bool>("IsPostcardOfTheWeek")
                        .HasColumnType("boolean")
                        .HasColumnName("is_postcard_of_the_week");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasColumnName("long_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.HasKey("PostcardId")
                        .HasName("pk_postcards");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_postcards_category_id");

                    b.ToTable("postcards", (string)null);
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shopping_cart_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShoppingCartItemId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<int>("PostcardId")
                        .HasColumnType("integer")
                        .HasColumnName("postcard_id");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("text")
                        .HasColumnName("shopping_cart_id");

                    b.HasKey("ShoppingCartItemId")
                        .HasName("pk_cart_items");

                    b.HasIndex("PostcardId")
                        .HasDatabaseName("ix_cart_items_postcard_id");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.OrderDetail", b =>
                {
                    b.HasOne("ASPCourceEmpty.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders_order_id");

                    b.HasOne("ASPCourceEmpty.Models.Postcard", "Card")
                        .WithMany()
                        .HasForeignKey("PostcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_postcards_postcard_id");

                    b.Navigation("Card");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.Postcard", b =>
                {
                    b.HasOne("ASPCourceEmpty.Models.Category", "Category")
                        .WithMany("Postcards")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_postcards_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("ASPCourceEmpty.Models.Postcard", "Postcard")
                        .WithMany()
                        .HasForeignKey("PostcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_postcards_postcard_id");

                    b.Navigation("Postcard");
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.Category", b =>
                {
                    b.Navigation("Postcards");
                });

            modelBuilder.Entity("ASPCourceEmpty.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
